% This program is copyright (c) BP65 Phoenix Engineering
\def\Algol{\textbf{Algol 68}}
\def\Web{\textbf{Web68}}

@1Introduction.

@m banner = "$Id: params.w68,v 1.4 2003/12/20 11:47:07 sian Exp $"

@a@<Compiler prelude@>
@<Modes in the outer reach@>
@<!NIL!s in the outer reach@>
@<Names in the outer reach@>
@<Operators in the outer reach@>
@<Procedures in the outer reach@>
SKIP
@<Compiler postlude@>

@ The local compiler requires a special prelude.@^system dependencies@>

@<Compiler prel...@>=
DECS params CONTEXT VOID
USE standard:

@ And a special postlude. All the public tags go here.@^system dependencies@>

@<Compiler post...@>=
KEEP
@<Public tags@>
FINISH

@1Tokens.
The basic mode for tokens is a structure which contains the
characters of the token and the !ty! field which determines the
type of the token.

@<Modes...@>=
MODE PARTOK = STRUCT(STRING v,INT ty);

@ Here is the !NIL! declaration.

@<!NIL!s...@>=
REF PARTOK @!no tok = NIL;

@2Lexical scanning.
The routine !get par tok! scans the stream of characters containing
the parameters and yields the next token of mode !REF PARTOK!, or !no
par! if there are no more parameters or a lexical error has occurred.

@m end tok = 0
@m open tok = 1
@m and also tok = 2
@m close tok = 3
@m string tok = 4
@m numb tok = 5
@m prog tok = 6

@<Procedures...@>=
PROC get par tok = (REF FILE @!f)REF PARTOK:
BEGIN
   HEAP PARTOK @!hp:=("",end tok);
   CHAR @!ch; INT @!p;
   on logical file end(f,(REF FILE @!ff)BOOL: (GOTO eof;  SKIP));
   @<Skip blanks and tab characters@>
   CASE
      IF char in string(ch,p,"""(,)")
      THEN p
      ELSE 0
      FI
   IN
#"#   @<Get a string denotation@>,
#(#   hp:=(ch,open tok),
#,#   hp:=(ch,and also tok),
#)#   hp:=(ch,close tok)
   OUT
      IF ch>="a" & ch<="z"
               OR
         ch>="A" & ch<="Z"
               OR
         char in string(ch,LOC INT,"/.~")
      THEN @<Process a program identification@>
      ELIF ch>="0" & ch<="9" OR ch="-" OR ch="+"
      THEN @<Process a number@>
      ELIF ch=nul ch
      THEN hp
      ELSE backspace(f);  no tok
      FI
   ESAC
   EXIT
eof:
   hp
END; #get par tok#

@ Blanks and tab characters are skipped.

@<Skip blanks...@>=
WHILE get(f,ch);  ch=blank OR ch=tab ch
DO
   SKIP
OD;

@ String denotations can contain embedded doubled string quotes. A
single quote should be inserted if so.

@m quote = """"

@<Get a string...@>=
BEGIN
   make term(f,quote);
   WHILE
      STRING s;
      get(f,(s,LOC CHAR,ch));
      v OF hp+:=s;
      ch=quote
   DO
      v OF hp+:=quote
   OD;
   backspace(f);
   ty OF hp:=string tok;
   hp
END

@ A program identification will usually look like an identifier, but
it could be the path to a program. We need to strip whitespace
(blanks and tab characters) from it. In fact any sequence of
characters starting with a lower case letter or a !"/"! or a !"."!
but excluding one of the terminators is acceptable.

@<Process a prog...@>=
WHILE NOT char in string(ch,LOC INT,"(,)"+nul ch)
DO
   IF ch/=blank & ch/=tab ch
   THEN v OF hp+:=ch
   FI;
   get(f,ch)
OD;
ty OF hp:=prog tok;  backspace(f);
hp

@ We do not try to distinguish between integers and reals, but simply
try to read a real after backspacing once.

@<Process a num...@>=
WHILE char in string(ch,LOC INT,tab ch+" 0123456789-+.e")
DO
   IF ch/=blank & ch/=tab ch@& THEN v OF hp+:=ch@& FI;
   get(f,ch)
OD;
ty OF hp:=numb tok;
backspace(f);
hp

@1Syntactic analysis.
Parameters may consist of one of the following:-
\begin{enumerate}
\item A string denotation.
\item A number.
\item A syntactic token.
\item A program identification followed by a parameter pack.
\end{enumerate}
A program identification may start with a lower-case letter or a
stroke or a dot and may be followed by any number of other characters
other than an open parenthesis or a comma or a closing parenthesis. A
parameter pack consists of one or more parameters separated by commas
and surrounded by parentheses. For example:-
\begin{center}
\texttt{grep("params",ls(-1,"*.c"))}
\end{center}
which contains the program identification \verb+grep+ followed by a
parameter pack with two parameters. The first is a string denotation.
The second consists of another program identification \verb+ls+
followed by a parameter pack with two parameters: an integer and a
string denotation.

Here are some modes which describe this structure.

@<Modes...@>=
MODE
   @!PARAM,
   @!VAL = UNION(STRING,INT,REAL,VOID,REF PARAM),
   @!PARAM = STRUCT(STRING prog,REF[]VAL val);

@ The high-level routine for getting parameters is !get param! which
returns a value of mode !VAL!. This will be !no param! if there are
no parameters.

@<!NIL!...@>=
REF PARAM @!no param = NIL;

@ The previous !VAL! is held globally.

@<Names...@>=
VAL @!prev val@!:=no param;

@ Normally, all parameters will be preceded by the identification of
the program or routine.

@<Procedures...@>=
PROC get param = (REF FILE f)VAL:
IF REF PARTOK @!rp = get par tok(f);  rp IS no tok
THEN no param
ELSE
   CASE ty OF rp
   IN
#(#   get param(f),
#,#   (prev val|(REF PARAM): EMPTY|get param(f)),
#)#   EMPTY,
#str#   prev val:=v OF rp,
#nmb# @<Get a number@>,
#prg# (@<Get a program identification plus parameters@>)
   OUT
#end#   no param
   ESAC
FI; #get param#

@ A program identification can be followed by arguments.

@<Get a program...@>=
HEAP PARAM @!hp:=(v OF rp,HEAP[1:0]VAL);
prev val:=hp;

WHILE VAL @!v:=get param(f);
   CASE v
   IN
      (UNION(INT,REAL,STRING) @!u):
         (hp+:=VAL(u); TRUE),
      (VOID):
         FALSE,
      (REF PARAM @!p):
         (p IS no param|FALSE|hp+:=VAL(p); TRUE)
   ESAC
DO SKIP OD;
hp

@ We need to define the operator !+:=! for modes !REF PARAM! and
!VAL!.

@<Oper...@>=
OP +:= = (REF PARAM @!rp,VAL @!v)VOID:
(
   HEAP[1+UPB val OF rp]VAL @!hv;
   IF UPB hv=1
   THEN hv[1]:=v
   ELSE hv[:UPB hv-1]:=val OF rp;  hv[UPB hv]:=v
   FI;
   val OF rp:=hv
);

@ For the sake of portability, we shall use the !stand back! file to
convert a string to a binary integer or real.

@<Get a num...@>=
IF STRING @!s=v OF rp;
   char in string(".",LOC INT,s) OR char in string("e",LOC INT,s)
THEN #Process a !REAL!#
   REAL @!r;
   @<Create a work file and output the string@>
   on logical file end(stand back,(REF FILE @!f)BOOL:
      (r:=0.0; GOTO eofr; SKIP));
   get(stand back,r);
eofr:
   scratch(stand back);
   prev val:=r
ELIF
   BOOL @!dig:=FALSE;
   FOR i FROM LWB s TO UPB s WHILE NOT(dig:=s[i]>="0"&s[i]<="9")
   DO SKIP OD;
   NOT dig
THEN #No digits in the string, so not a number#
   prev val:=s
ELSE #Process an !INT!#
   INT @!n;
   @<Create a work file...@>
   on logical file end(stand back,(REF FILE @!f)BOOL:
      (n:=0; GOTO eofi; SKIP));
   get(stand back,n);
eofi:
   scratch(stand back);
   prev val:=n
FI

@ We create a work file using !stand back! and !stand back channel!.

@<Create a work file...@>=
create(stand back,stand back channel);
put(stand back,(s,"A"));
reset(stand back);

@ Here are the public tags.

@<Pub...@>=
+:=(REF PARAM,VAL),
PARAM,VAL,get param,no param

@1System dependencies.
Check these if you are porting this program to another platform.
