PROGRAM module_manage CONTEXT VOID USE putstrings, osinterface, messageproc,
                                       commandsyntax, commandreader, command,
                                       kernelreader, ioprocs, commandcaller,
                                       globalcommands,
                                       mm_basics, mm_oscommands, mm_actions,
                                       mm_version
BEGIN

configinfo A68CONFIG "$Id: module_manage.a68,v 1.3 2002-06-06 13:55:55 sian Exp $";


COMMENT 
    ************************************************************************
    This Program is the property of the Secretary of State for Defence
    (United Kingdom) acting through the Defence Research Agency (DRA). Use,
    reproduction, production of amended versions and/or transfer of this
    Program is permitted provided that:

  (a)  this legend be preserved on any such reproduction and amended version,
  (b)  any amended version of this Program be clearly marked to show the
       nature of the amendment and of the name of the amending organisation,
  and
  (c)  any recipient  of such reproduction or amended version accept the
       conditions set out in this legend.

                         Crown Copyright, (c)   1984

                             All rights reserved.

    The Secretary of State for Defence (United Kingdom) acting through his
    Defence Research Agency (DRA) gives no warranty that any element of the
    Software is suitable for any purpose and he shall not be liable for any
    loss or damage including loss or damage resulting in injury or death
    howsoever caused which results from the use of the Software, or any
    developments adaptions modifications translations and enhancements
    thereof.

    The original authors may be contacted via email on ella@dra.hmg.gb or by
    writing to ELLA Office, DRA, St Andrews Road, Malvern, Worcs WR14 3PS, UK.
    ************************************************************************

31:08:94  33.001  ELLA  NewConFig Entered in new config system previous version
                                  number 32.1 
02:09:94  33.001  DJS    
08:09:94  33.002  DJS   MMCR001   
29:03:95  34.003  ELLA  Modcprght Change copyright header
15:01:00  34.004  SL    Phoenix Engineering: chgd prog id and spelling
COMMENT

#Phoenix Engineering (SL): changed the program id
VECTOR[ ]CHAR prog_name = "Module Manage", mm_sysdir = "MM_SYSDIR";#
VECTOR[ ]CHAR prog_name = "Module Manager", mm_sysdir = "MM_SYSDIR";

    initialise_osinterface(( prog_name, { facility name -
                                                        used in error messages }
                            "35.000", "01:07:00", "",
                            "Please make a copy of your database files and any "
                            "other relevant files and report details" ), TRUE );

COMMANDENV env;   { holds information about the current command context }
CHAR bell_char = REPR 7;
VECTOR[ 2 ]CHAR mm_prompt := "Mm";
VECTOR[ UPB mm_prompt + 3 ]CHAR bell_prompt;

    bell_prompt[ 1 : 3 ] := ( bell_char, bell_char, bell_char );
    bell_prompt[ 4 : ] := mm_prompt;

PROC get_prompt = REF VECTOR[ ]CHAR:
BEGIN
REF VECTOR[ ]CHAR prmpt = IF ring_bell THEN bell_prompt ELSE mm_prompt FI;

    ring_bell := FALSE;
    prmpt
END;

PROC no_info = VOID: SKIP;
BOOL have_database := TRUE;
REF VECTOR[ ]CHAR param := nullstr,
                  node_name := nullstr,
                  in_fname := nullstr;

    initialise_ioprocs( get_prompt );

PROC reset = VOID:
BEGIN
    in_fname := node_name := param := nullstr
END;

PROC check_arg = (VECTOR[ ]CHAR arg,  PROC VECTOR[ ]CHAR next )BOOL: { OK }
    IF arg = "-g" THEN
        node_name := MAKERVC next;
        TRUE
  ELIF arg = "-i" THEN
        filename_arg( next, "Input", inp_type, in_fname, TRUE )
  ELIF UPB arg >= 1  ANDTH  arg[1] = "-" THEN
        put( screen, ( "Unexpected option """, arg, """", newline ));
        FALSE
  ELIF UPB param > 0 THEN
        put( screen, (" Extra argument """, arg, """", newline ));
        FALSE
  ELSE
        param := MAKERVC arg;
        TRUE
    FI;

PROC no_more = (BOOL ok )BOOL: ok;
CONTINUATION result := quit;

    IF UPB get_args > 1 THEN
        parse_arguments( "Give database file name ([-g node | -t filename]): ",
                         reset, check_arg, no_more )
    FI;

{ Set up input if required }

    IF UPB in_fname > 0 THEN io_input( in_fname, global_msg ) FI;

#Phoenix Engineering (SL) changed the title
    put( screen, ( "              Welcome to Module Manage version ", mm_number,#
    put( screen, ( "              Welcome to Module Manager version ", mm_number,
                   newline, newline ));

VECTOR[ 25 ]CHAR help_banner := "Module Management program";
REF COMPOUND outer_command =
   make_compound
      ( HEAP SIMPLE:= ( MAKERVC "MM_OUTER", nullstr, noparameters,
                        normalaccess, finish,
                        help_banner, nullcommand ),
        help_banner,
        HEAP REF VECTOR[ ]CHAR := mm_prompt,
        make_mm_commands( global_msg ),
        make_globalcommands( mm_sysdir, mmd_type, no_info,
                             REF COMMANDENV: env ),
        nullcommand
      );

    env := initialise_commands( report_error, set_default_msg, global_msg,
                                call_command, make_kernel_readers,
                                outer_command, no_parameters );

    IF UPB param > 0 THEN database_name := param FI;
    IF NOT case_sensitive THEN set_lowercase( database_name ) FI;
    IF NOT read_database( database_name, "Read", mmd_tag, global_msg ) THEN
        IF query( oneline(( "No MM database named ", database_name,
                            ". Do you wish to create one" )),
                  default_no, global_msg ) THEN
            create_database( database_name, global_msg )
      ELSE
            have_database := FALSE
        FI
    FI;

    IF NOT have_database THEN
        SKIP
  ELIF UPB node_name > 0 THEN
        obey_go_action( node_name, interactive, global_msg );
        result := finish
  ELIF interactive THEN
        WHILE
            result := interpret_commands( env );
            IF result = finish OREL
               diagnose OREL
               database_modified = save_none OREL
#Phoenix Engineering (SL) corrected the spelling
               query( "Database has been modified, do you realy wish to quit",#
               query( "Database has been modified, do you really wish to quit",
                      no_default, global_msg )
          THEN
                FALSE
          ELSE
                TRUE
            FI
        DO SKIP OD
    FI;

    IF result = finish THEN
    INT save_mode = database_modified;
    BOOL save = ( save_mode /= save_none );

        IF need_to_tidy OREL save THEN
            PROC no_fail = (MSGNO msgno, VECTOR[ ]VECTOR[ ]CHAR params )VOID:
            BEGIN
            MESSAGE message = translate_msg( msgno, params );

                put( screen, ( "Tidyup :- ", text OF message, newline,
                               "Continue to exit.", newline ));
                GOTO skip_tidy
            END;

            REF VECTOR[ ]CHAR nn := oneline(( database_name, mmd_type ));

            put( screen, ("Save file ", nn, " in ", save_file( nn, no_fail ),
                          newline ));
            IF ( UPB detach_name > 0 ) ANDTH
               ( need_to_tidy OREL save_mode >= save_modules ) THEN
                nn := oneline(( detach_name, aux_type ));
                put( screen, ("Save file ", nn, " in ",
                              save_file( nn, no_fail ),
                              newline ))
            FI;

        skip_tidy:

            IF save THEN
                save_database( database_name, detach_name, save_mode,
                               global_msg )
            FI
        FI
    FI;

    close_oscommands( global_msg );
    SKIP
END
FINISH
