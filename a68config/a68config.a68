DECS  a68config  CONTEXT  VOID:

{A68CONFIG} VECTOR[]CHAR cfs = "$Id: a68config.a68,v 1.1.1.1 2001-05-07 10:16:10 sian Exp $";


COMMENT 
    ************************************************************************
    This Program is the property of the Secretary of State for Defence
    (United Kingdom) acting through the Defence Research Agency (DRA). Use,
    reproduction, production of amended versions and/or transfer of this
    Program is permitted provided that:

  (a)  this legend be preserved on any such reproduction and amended version,
  (b)  any amended version of this Program be clearly marked to show the
       nature of the amendment and of the name of the amending organisation,
  and
  (c)  any recipient  of such reproduction or amended version accept the
       conditions set out in this legend.

                         Crown Copyright, (c)   1993

                             All rights reserved.

    The Secretary of State for Defence (United Kingdom) acting through his
    Defence Research Agency (DRA) gives no warranty that any element of the
    Software is suitable for any purpose and he shall not be liable for any
    loss or damage including loss or damage resulting in injury or death
    howsoever caused which results from the use of the Software, or any
    developments adaptions modifications translations and enhancements
    thereof.

    The original authors may be contacted via email on ella@dra.hmg.gb or by
    writing to ELLA Office, DRA, St Andrews Road, Malvern, Worcs WR14 3PS, UK.
    ************************************************************************

23:08:93  Module created to enable a configuration trace to be generated
          from a run of ELLA.  This Module must be compiled as a "library"
          module to enable A68CONFIG;
25:08:93  Add OP A68INIT, and make OP A68CONFIG dyadic.  DJS
08:09:93  New Ctrans config information now included.  DCT
10:09:93  A68INIT moved to another module to allow call of A68CONFIG.  DCT
23:09:93  A68INIT brought back and replaced by CODE.  DCT
30:09:93  Century to be retained in the date.  DCT
13:06:94  33.001  ELLA  NewConFig Entered in new config system previous version
                                  number  32.006 
26:08:94  33.001  ELLA  NewConFig Re-format RCS ident string to extract data
                                  required by 'pconfig' command in ELLA. 
29:03:95  34.002  ELLA  Modcprght Change copyright header
??:??:??   ?.???  ????
COMMENT
{
   Configuration control module: example of a typical source file header is
   included in PROC init below.
}

MODE  STR = VECTOR [0] CHAR,
      RVC = REF STR,
      CONFIGDATA = STRUCT (RVC  data,  REF CONFIGDATA  rest);

{ Although these operators are defined here they would not normally be
  accessable as they are redefined in usefulops / putstrings }

OP  (STR) RVC  STRTORVC  = BIOP 99;
OP  (STR) RVC  MAKERVC = (STR  s) RVC:  HEAP VECTOR [UPB s] CHAR:= s;

{ The A68INIT operator is dangerous - use at the outer level of a DEC module
  with care - use only where order of DECS startup is not important.  DCT }

OP A68INIT = (PROC VOID  init_proc) VOID:  init_proc;

REF CONFIGDATA  nilconfigdata = NIL;
CONFIGDATA  configdata:=
   ( STRTORVC "Start of the ALGOL68 RS Module chain - where a Module has been "
              "compiled using ""Ctrans"" the final three fields are the "
              "Ctrans version number, the seed for the unique name prefix for "
              "ALGOL68 identifiers and the translation date."16r"a",
     nilconfigdata );
REF REF CONFIGDATA  tail:= rest OF configdata;
PROC (STR) VOID  show_proc:= (STR s) VOID:  SKIP;


OP  SHOWA68CONFIG = (PROC (STR) VOID  show) VOID:
BEGIN
   { Operator for diagnostic use only - will show initialisation sequence after
     the module in which this operator is invoked.  The parameter must be a
     suitable global print procedure. }
   show_proc:= show;
   show_proc("Initialisation sequence - configuration information:")
END;

PROC  concat = (VECTOR [] STR  strs) RVC:
BEGIN
   { Local procedure to assemble data into single string }
   INT  l:= 0;
   FORALL st IN strs
   DO  l PLUSAB UPB st  OD;
   HEAP VECTOR [l] CHAR  ans;
   l:= 0;
   FORALL str IN strs
   DO  ans[l + 1 : l + UPB str]:= str;
       l PLUSAB UPB str
   OD;
   ans
END;


*4 {{{  { Recover the Ctrans translation time configuration data }

MODE  CCHARPTR = REF CHAR,
      TRANSDETAILS = STRUCT (CCHARPTR  file, time, version, seed);

OP  >>> = (STR  config,  REF TRANSDETAILS  td) VOID:
BEGIN
   CODE (config, td)
      "A_CONFIG_INFO *A_config = (A_CONFIG_INFO*)(config.data);"
      "td->File = (A68_CHAR*)(A_config->source_file);"
      "td->Time = (A68_CHAR*)(A_config->translation_time);"
      "td->Version = (A68_CHAR*)(A_config->ctrans_version);"
      "td->Seed = (A68_CHAR*)(A_config->name_seed);"
END;

OP TOSTR = (CCHARPTR  cp) STR:
BEGIN
   PROC (CCHARPTR) INT  strlen = ALIEN
      "STRLEN"
      "#include <string.h>"
      "#define STRLEN(cp) (A68_INT)(strlen((char *) cp))";
   OP (CCHARPTR) REF STRUCT 1000 CHAR  TOCSTR = BIOP 99;
   (TOCSTR cp)[: strlen(cp)]
END;

PROC  version = (STR  v) STR:
   IF UPB v > 7  ANDTH  v[:7] = "Ctrans_" THEN  v[8:]  ELSE  v  FI;

PROC  time = (STR  t) STR:
   IF UPB t = 24
   THEN  concat((t[9:10], "-", t[5:7], "-", t[21:24], t[11:16]))
   ELSE  t
   FI;

PROC  seed = (STR  s) STR:
   IF UPB s > 7
   THEN  s[:7]
   ELSE  s
   FI;

PROC  trans_config = (STR  c, s) RVC:
   IF UPB c = -777
   THEN  TRANSDETAILS  td;
         c >>> td;
         concat(( s, "  ", version(TOSTR version OF td), " ",
                  seed(TOSTR seed OF td), " ", time(TOSTR time OF td) ))
   ELIF UPB c = 0
   THEN  STRTORVC s  { Must have string literal (or global) parameter }
   ELSE  concat((s, "  ", c))
   FI;


*4 }}}  PROC  trans_config = (STR  c, s) RVC:
*4         IF UPB c = 0 THEN  STRTORVC s  ELSE  concat((s, "  ", c))  FI;


OP  A68CONFIG = (STR c, s) VOID:
BEGIN
   { Operator to be called at the top of each module with information supplied
     by the configuration management system
   }
   INT top = UPB s;
   RVC  str = IF top > 4 ANDTH s[1:4] = "$Id:"
              THEN  VECTOR[ top ]CHAR ns := s;
                    INT p1 := 4, p2 := 4;
                    CHAR ch;
                    ns[1:4] := "RSRE";  { Put in indication that transformation
                                          has been done }
                    WHILE p2 < top ANDTH s[p2 PLUSAB 1] /= "." DO SKIP OD;
                    p1 := p2-1;
                    WHILE p2 < top ANDTH s[p2 PLUSAB 1] /= " " DO SKIP OD;
                    ch := " ";
                    TO 2
                    DO
                       WHILE ( ns[ p1 PLUSAB 1 ] := ch;
                               p2 < top ANDTH ( ch := s[p2 PLUSAB 1] ) /= ":" )
                       DO SKIP OD
                    OD;
                    trans_config(c, ns[ : p1])
              ELSE  trans_config(c, s)
              FI;
   tail:= rest OF ( REF REF CONFIGDATA (tail):= HEAP CONFIGDATA:=
                    (str, nilconfigdata) );
   show_proc(str)
END;

PROC  show_a68config = (PROC (STR) VOID  show) VOID:
BEGIN
   { Procedure defined to construct a configuration printer }
   REF CONFIGDATA  ptr:= configdata;
   WHILE ptr ISNT nilconfigdata
   DO  show(data OF ptr);  ptr:= rest OF ptr  OD
END;

*4 STR  configinfo = "";
*4 { NOT VAX ...

{ Use the ALIEN mechanism to pick up information injected by Ctrans - the text
  of the definiton of "configinfo" will also be injected into each Module that
  uses it - thus ensuring that the local definition is used.
}

STR  configinfo = ALIEN "ACONFIG"
   "static A68_VC  A_configinfo;"
   "/* A cheat - pass a REF through the DECS Module restriction via STR */"
   "#define ACONFIG ( A_configinfo.data = (A68_CHAR*)(&A_config), \"
   "                  A_configinfo.upb = (A68_INT)(-777), A_configinfo )";


{ Now arrange for the configinfo for this module to be stored - unfortunately,
  "configinfo" can not be used by PROC init as this would move its declaration
  to before that of the C variable "A_config".  Therefore we must use another
  STR declaration to A_config.
}

STR  a_configinfo = ALIEN "A_configinfo" "/* configinfo without ACONFIG */";

*4 }

{ Procedure to place local config info on list - use form recognised by tools }

PROC  init = VOID:
BEGIN
%4 STR  configinfo = a_configinfo;
%4 { A_config is out of scope when this procedure is defined - use a_configinfo
%4   but must alias to "configinfo" as the next line is generated automatically
%4   by the configuration management tools
%4 }
configinfo A68CONFIG cfs;
   SKIP
END;

{ We now need to overcome the DECS module restriction on procedure calls as
  we can not call A68INIT either
}

CODE (init)
*4 16r"fb 00 9e"   { CALLS #0 @(SP)+ }
%4 "ACONFIG;       /* Invoke the macro to setup A_configinfo */"
%4 "init();"


KEEP   STR,  RVC,  STRTORVC (STR),  MAKERVC (STR),  A68INIT (PROC VOID),
       SHOWA68CONFIG (PROC (STR) VOID),  A68CONFIG (STR, STR),
       show_a68config, configinfo
FINISH
