DECS  putstrings  CONTEXT VOID  USE  osif, strops,  numberstr,  iobasics:

configinfo A68CONFIG "$Id: putstrings.a68,v 1.1.1.1 2001-05-07 10:16:11 sian Exp $";


COMMENT 
    ************************************************************************
    This Program is the property of the Secretary of State for Defence
    (United Kingdom) acting through the Defence Research Agency (DRA). Use,
    reproduction, production of amended versions and/or transfer of this
    Program is permitted provided that:

  (a)  this legend be preserved on any such reproduction and amended version,
  (b)  any amended version of this Program be clearly marked to show the
       nature of the amendment and of the name of the amending organisation,
  and
  (c)  any recipient  of such reproduction or amended version accept the
       conditions set out in this legend.

                         Crown Copyright, (c)   1984

                             All rights reserved.

    The Secretary of State for Defence (United Kingdom) acting through his
    Defence Research Agency (DRA) gives no warranty that any element of the
    Software is suitable for any purpose and he shall not be liable for any
    loss or damage including loss or damage resulting in injury or death
    howsoever caused which results from the use of the Software, or any
    developments adaptions modifications translations and enhancements
    thereof.

    The original authors may be contacted via email on ella@dra.hmg.gb or by
    writing to ELLA Office, DRA, St Andrews Road, Malvern, Worcs WR14 3PS, UK.
    ************************************************************************

11:04:84  Simple transput package to interface to basic FLEX and VAX
             procedures in a manner compatable with 1906 68R character transput.

             "charnumber" gives next character position to be written to.
             A buffer may be provided externally or generated by "make_channel".

             "newline" and "newpage" are called automatically if necessary -
             the default page length is infinite.
15:04:84  Last char of line bug.  UPB > width fail replaced by chopped line.
28:09:84  renamed
30:01:85  bug of 15:04:84 not properly corrected.  Extra FLEX  PROCs
19:06:85  completely re-written:
             OUTCONT added to allow extra layout PROCs to be defined legally:
             tab,  pos,  after,  spaces,  lines.
             "oneline"  added as a more general replacement for the FLEX
             PROC - allowing objects to be grouped.  BITS output and space
             between INT / BITS.  Faults removed - newline called where
             object will not fit - chopped if object larger than total width.
             "justify" (= right justify) and "width" (= left justify) added -
             in each case, object is unaltered if too big.
             *****  1906S added - "put" as provided in "syslib"  *****
             ( 1906  extra space in front of positive integers unavoidable )
12:07:85  several lines added to aid making VAX help
22:11:85  Brought to Perq - 1906 removed
25:11:85  FLEX pointers catered for
05:11:86  Updated for new os interface
14:11:86  CR 170.  Maximum negative int - change PROC intchars.  EVW
26:06:87  Changes for C trans limitations:
             MODE STRAIGHT removed from OUTMODE, "several lines" amended;
             cut down "nibbled" provided in place of standard library routine
02:04:87  "intwidth" added  CR231  DCT.
02:11:87  OUTMODE broadened to reduce the impact of no STRAIGHT on ELLA.  DCT
11:05:88  CR 596  Modules renamed  JER
11:08:88  Corrected + operator for two STRs to cope with -ve bounds. BGH
14:06:90  Bug in spacing between elements of INT / BITS VECTORs.  DCT
20:02:91  SHORT BITS &c added to OUTMODE and hex.  DCT
03:02:93  Completely reworked to fit better with the new C OSIF.  DCT
22:02:93  endput added to aid the building of VECTOR [] CHARs.  DCT
28:05:93  Botch to handle newline_char for VMS transfered to VMSIF.  DCT
21:06:93  A trim produced a -ve UPB - putstr modified to cope.  DCT
20:09:93  Number spacing and string chopping algorithms not correct.  DCT
27:09:93  For the first time... some things moved out to another module -
             "strops".  Standard built-in operators removed (+).  DCT
13:06:94  33.001  ELLA  NewConFig Entered in new config system previous version
                                  number  31.023 
05:12:94  33.001  ELLA   CmplxNos   Modes, make_channel and some other
                                    procedures separated into 'iobasics'.
                                    Correct STRAIGHT bug in put. 
29:03:95  34.002  ELLA  Modcprght Change copyright header
??:??:??   ?.???  ????
COMMENT

COMMENT

   Module  PUTSTRINGS

   This module is provided to aid the construction of strings of characters for
   output.  It is designed to be largely machine independent and robust.  Three
   levels are provided:  first, individual procedures for creating a VECTOR []
   CHAR from various parameters;  second, a procedure called "oneline" which
   takes an arbitary structure and aplies the first level procedures to each
   component in turn, concatenating the result to produce a new VECTOR [] CHAR;
   and finaly, the procedure "put", similar to oneline, which automatically
   calls a lower level procedure, supplied by the user through a "CHANNEL", at
   the end of each line or page.  No facilities are provided for overwriting
   previous output.

   1)  Modes:

   STR      VECTOR [] CHAR
   VI       VECTOR [] INT
   RVC      REF VECTOR [] CHAR  - used for convenience = ID.
   RVI      REF VECTOR [] INT   - used for convenience.
   FLTPROC  PROC (STR) VOID     - standard mode for fault procedures

   CHANNEL  Structure used to hold information about an output channel.
            On 1906 this may be used directly for output by "opening" using
            "openc".  On an RS machine a PROC (STR) VOID is provided when
            the structure is created (BOOL = new page requested) - allowing
            lower level control over output.

   2)  General VECTOR [] CHAR procedures

   MAKERVC  creates an RVC on the heap from its string parameter.

   CLEAR    sets an RVC to spaces or an RVI to zeros.

   concat   declared for any number of VECTOR [] CHAR parameters - delivers
            the HEAPed concatenation of its parameter

   OP  *    for VECTOR [] CHAR or CHAR, concatenates the first parameter onto
            itself the number of times specified by the second INT parameter
            ( PRIORITY 7 ).

   intchars converts an integer to a VECTOR [] CHAR - its decimal character
            representation - in the minimum space.

   hex      Converts a BITS value to its hexadecimal character representation -
            leading zeros are shown ( 8 digits - 32 bits ).


   3)  Procedures using private STRUCT modes or of the form PROC (RCH) VOID:

  intwidth  converts an integer to a VECTOR [] CHAR - its decimal character
            representation - within the specified width iff it is wide enough
            (right justified).

    width    = left justify.  Takes a VECTOR [] CHAR and fits it left justified
            into a string of specified width.  If the VECTOR is too wide then
            it is delivered unaltered.

   justify  = right justify.  Takes a VECTOR [] CHAR and fits it right justified

            into a string of specified width.  If the VECTOR is too wide then
            it is delivered unaltered.

   tab     space fills to character position  (n * parameter + 1)  - requests
           beyond the end of line take position to start of next line.

   pos     space fills to character position  (parameter + 1)  - if this
           position has already been past then tab is called on a new line.

   after   space fills to character position  (parameter + 1)  or one space
           beyond the current - which ever is the most to the left.

   spaces  puts  parameter  spaces or takes a newline if not sufficient room.

   lines   calls "newline"  parameter  times



   4)  VECTOR [] OUTMODE procedures
       NB:    Successive BITS or INT values will be separated by a single space

   put        takes a REF CHANNEL and a VECTOR [] OUTMODE and writes the
              components of its second parameter into a buffer refered to in
              the CHANNEL.  If an object will not fit on the current line it
              is written whole on the next line.  If an object is too wide to
              fit at all then it is chopped into line width pieces.  Associated
              with the CHANNEL is a procedure supplied by the user for
              outputting vectors of characters.  This is called automatically
              at the end of a line as described above or explicitly by
              "newline" or "newpage" ( in the latter case with its second
              boolean parameter set TRUE ).

   putb       takes a buffer (RVC) and a VECTOR [] OUTMODE and writes the
              components of its second parameter into the buffer delivering
              a trim of the buffer.

   endput     used with buffered put - trims out current buffer contents and
              resets charnumber to 1.

   oneline    takes a VECTOR [] OUTMODE and delivers a REF VECTOR [] CHAR which
              is the concatenation of the components of its parameter.
              "newline" will cause preceding elements to be lost.


   5)  Associated CHANNEL procedures

   newline    take a newline of output - calls the procedure supplied by the
              user when the CHANNEL was created to output the buffer.  The BOOL
              new page parameter is set FALSE.

   charnumber takes a REF CHANNEL and delivers an INT - the next character
              position to be written to.  After a call of "newline" the next
              character will be 1.

   charsleft  takes a REF CHANNEL and delivers an INT - the number of character
              positions remaining on the current line.


   6)  Creating an output CHANNEL

   make_channel  takes either a buffer ( REF VECTOR [] CHAR ) or an INT
                 ( buffer width ) and a PROC ( REF VECTOR [] CHAR ) VOID
                 and returns a REF CHANNEL.  Procedure used to associate a
                 buffer and an outputting procedure with a CHANNEL.

COMMENT

{{{  general string PROCs  }}}

OP  (STR) RVC  STRTORVC = BIOP 99;
OP  (RVC) STR  RVCTOSTR = BIOP 99;

{  Moved to strops
   OP  MAKERVC  = (STR  str) RVC:  HEAP VECTOR [UPB str] CHAR:= str;
   OP  MAKERVC  = (CHAR  c)  RVC:  HEAP VECTOR [1] CHAR:= c;
}

OP  MAKERVI  = (VI  ints) RVI:  HEAP VECTOR [UPB ints] INT:= ints;
OP  MAKERVI  = (INT  i)   RVI:  HEAP VECTOR [1] INT:= i;

OP  CLEAR  =  (RVC  line) VOID:  FORALL c IN line DO  c:= " "  OD;
OP  CLEAR  =  (RVI  ints) VOID:  FORALL i IN ints DO  i:= 0  OD;

{ Moved to strops
  PROC  concat = (VECTOR [] STR  strs) RVC:
  BEGIN
     INT  l:= 0;
     FORALL st IN strs DO  l PLUSAB UPB st  OD;
     HEAP VECTOR [l] CHAR  ans;
     l:= 0;
     FORALL str IN strs
     DO  INT  lwb = l + 1, upb = l PLUSAB UPB str;
         ans[lwb : upb]:= str
     OD;
     ans
  END;
}


PRIO  *  =  7;

OP  *  =  (STR  a, INT  n) STR:
BEGIN
   VECTOR [UPB a * n] CHAR  ans;
   FOR i TO n DO  ans[(n-1) * UPB a + 1 : n * UPB a]:= a  OD;
   ans
END;

OP  *  =  (CHAR  a, INT  n) STR:
BEGIN
   VECTOR [n] CHAR  ans;
   FORALL c IN ans DO  c:= a  OD;
   ans
END;


PROC  hexchars = (UNION (BITS, INT, SHORT BITS, SHORT INT, CHAR)  b) STR:
BEGIN
   BITS  n;
   INT  n_digits = CASE b IN
                      (BITS  b)  (n:= b; 8),
                      (INT  i)   (n:= BIN i; 8),
                      (SHORT BITS sb)  (n:= LENG sb; 4),
                      (SHORT INT  si)  (n:= LENG BIN si; 4),
                      (CHAR  c)  (n:= BIN ABS c;  2)
                   ESAC;
   BITS  mask = 16rf;
   VECTOR [n_digits] CHAR  ans;
   FOR i FROM n_digits BY -1 TO 1
   DO  ans[i]:= "0123456789ABCDEF"[ABS (n AND mask) + 1];
       n:= n SHR 4
   OD;
   ans
END;


{ Moved to "strops" - check consistency with this and add_number  27:09:93  DCT
  PROC  intchars = (INT  i) STR:   etc.
}

{{{ RCH and put procedures - completely rewritten - 02:02:93  DCT }}}


MODE  INTWIDTH = STRUCT (INT  int, width),
      WIDTH    = STRUCT (STR  str, INT  width),
      JUSTIFY  = STRUCT (STR  str, INT  justify),
      TAB      = STRUCT (INT  tab),
      POS      = STRUCT (INT  pos),
      AFTER    = STRUCT (INT  after),
      SPACES   = STRUCT (INT  spaces),
      LINES    = STRUCT (INT  lines),
      INDENT   = STRUCT (INT  indent),
      OUTMODE  = UNION ( INT,  VI,  BITS,  VECTOR [] BITS,
                         SHORT BITS,  CHAR,  STR,
                         BOOL,  VECTOR [] BOOL,
                         REAL,  VECTOR [] REAL,
                         PROC (RCH) VOID,
                         INTWIDTH, WIDTH, JUSTIFY, TAB, POS, AFTER, SPACES,
                         LINES, INDENT, PROC (RCH) VOID,
                         STRAIGHT OUTMODE );


STRUCT 512 CHAR  sp;
FORALL ss IN sp DO  ss:= " "  OD;


PROC  intwidth = (INT i, INT w) INTWIDTH: (i, w); { right justify int in width }
PROC  width    = (STR s, INT w) WIDTH:    (s, w); { left justify str }
PROC  justify  = (STR s, INT j) JUSTIFY:  (s, j); { right justify str }
PROC  tab = (INT i) TAB: (TAB t; tab OF t:= i; t);  { space fill to multiple }
PROC  pos = (INT i) POS: (POS p; pos OF p:= i; p);  { move to column }
PROC  after = (INT i) AFTER: (AFTER a; after OF a:= i; a); { move to >= pos }
PROC  spaces = (INT i) SPACES: (SPACES s; spaces OF s:= i; s); { n spaces }
PROC  lines = (INT i) LINES: (LINES l; lines OF l:= i; l);     { n lines }
PROC  setindent = (INT n) INDENT: (INDENT i; indent OF i:= n; i); { set indent }
PROC  resetindent = (RCH  ch) VOID:  indent OF ch:= 0;


PROC  writeline = (RCH  ch) VOID:  { no newline character }
   { indentation is delayed until something is wanted on the line }
   IF buffered OF ch
   THEN  (putbuffer OF ch)((buffer OF ch)[: charnumber OF ch - 1]);
         charnumber OF ch:= 1;
         linenumber OF ch PLUSAB 1;
         separate OF ch:= FALSE
   ELSE  { nothing to output - just reset counts }
         charnumber OF ch:= 1;
         linenumber OF ch PLUSAB 1;
         separate OF ch:= FALSE
   FI;


PROC  putstr = (RCH  ch,  STR  str) VOID:
BEGIN
   INT  t;  { for space hunting - declared here to avoid new stack frame }

   IF UPB str > 0
   THEN
      separate OF ch:= FALSE;
      REF INT  pos = charnumber OF ch;

      IF pos <= indent OF ch
      THEN  INT  indent = indent OF ch;
            IF buffered OF ch
            THEN  (buffer OF ch)[pos : indent]:= sp[: indent - pos + 1]
            ELSE  (putbuffer OF ch)(sp[: indent - pos + 1])
            FI;
            pos:= indent + 1
      FI;

      INT  maxsize = width OF ch - pos + 1;
      IF UPB str <= maxsize
      THEN  { str will fit on line }
            IF buffered OF ch
            THEN  (buffer OF ch)[pos : pos + UPB str - 1]:= str
            ELSE  (putbuffer OF ch)(str)
            FI;
            pos PLUSAB UPB str
      ELIF maxsize = 0
      THEN  newline(ch);
            putstr(ch, str)
      ELSE  { chop }
            t:= maxsize;
            WHILE t > 0
            DO  IF str[t] = " " THEN  t := -t  ELSE  t MINUSAB 1  FI  OD;
            IF t = 0
            THEN  { no space characters }
                  IF pos = indent OF ch + 1
                  THEN  { have already taken a newline - chop mercilessly }
                        IF buffered OF ch
                        THEN  (buffer OF ch)[pos : pos + maxsize - 1]:=
                                                str[: maxsize]
                        ELSE  (putbuffer OF ch)(str[: maxsize])
                        FI;
                        pos PLUSAB maxsize;
                        newline(ch);
                        putstr(ch, str[maxsize + 1 :])
                  ELSE  { take a new line and try again }
                        newline(ch);
                        putstr(ch, str)
                  FI
            ELSE  { found a space - break here - remove spaces either side }
                  INT  second = -t;
                  t:= -t;
                  WHILE (t MINUSAB 1) > 0  ANDTH  str[t] = " "
                  DO  SKIP  OD;
                  IF buffered OF ch
                  THEN  (buffer OF ch)[pos : pos + t - 1]:= str[: t]
                  ELSE  (putbuffer OF ch)(str[: t])
                  FI;
                  pos PLUSAB t;
                  t:= second;
                  WHILE (t PLUSAB 1) < UPB str  ANDTH  str[t] = " "
                  DO  SKIP  OD;
                  newline(ch);
                  putstr(ch, str[t :])
            FI
      FI
   FI
END;


PROC  putline = (RCH  ch,  STR  line) VOID:   { more efficient than put }
BEGIN
   putstr(ch, line);
   newline(ch)
END;

PROC add_real = (RCH  ch,  REAL re,  INT width, digits ) VOID:
BEGIN
   RVC realstr = float( re, width, digits, 3 );  { The last param is ignored at
                                                   present, however make it
                                                   consistent with current
                                                   behaviour }
   IF UPB realstr > 0 ANDTH realstr[1] /= " " ANDTH separate OF ch
   THEN  putstr(ch, space_str )
   FI;
   putstr(ch, realstr);
   separate OF ch:= TRUE
END;

{{ Now that numberstr is being used these could be made to emply more
   efficient mechanisms, however to do so may subtly change the form of the
   output so that option is left till another review }}
PROC  add_number = (RCH  ch,  INT  int,  width) VOID:
BEGIN
   STRUCT 32 CHAR  line;   { Big enough for 64 bit }
   STRUCT 10 CHAR  chars =
         IF int < 0 THEN  "0987654321"  ELSE  "0123456789"  FI;
   INT  n:= int,  l:= 33;
   IF n = 0
   THEN  line[l MINUSAB 1]:= "0"
   ELSE  WHILE n /= 0
         DO  line[l MINUSAB 1]:= chars[(n MOD 10) + 1];
             n OVERAB 10
         OD;
         IF int < 0 THEN  line[l MINUSAB 1]:= "-" FI
   FI;
   INT  sp = width - 33 + l;
   IF sp > 0
   THEN  TO sp DO  line[l MINUSAB 1]:= " "  OD
   ELIF separate OF ch THEN  line[l MINUSAB 1]:= " "
   FI;
   putstr(ch, line[l :]);
   separate OF ch:= TRUE
END;


PROC  add_bits = (RCH  ch,  BITS  b,  INT  leng) VOID:
BEGIN
   STRUCT 32 CHAR  line;
   INT  l:= 33;
   BITS  n:= b;
   WHILE
      line[l MINUSAB 1]:= "0123456789ABCDEF"[ABS (n AND 16rf) + 1];
      (n:= n SHR 4) /= 16r0
   DO  SKIP  OD;
   TO leng - 33 + l DO  line[l MINUSAB 1]:= "0"  OD;
   IF separate OF ch THEN  line[l MINUSAB 1]:= " "  FI;
   putstr(ch, line[l :]);
   separate OF ch:= TRUE
END;


PROC  put = (RCH  ch,  VECTOR [] OUTMODE  out) VOID:
   FORALL elem IN out
   DO  CASE elem IN
          (INT  n)
             add_number(ch, n, 0),
          (VI  vi)
             FORALL i IN vi DO  add_number(ch, i, 0)  OD,
          (BITS  bits)
             add_bits(ch, bits, 8),
          (VECTOR [] BITS  vb)
             FORALL b IN vb DO  add_bits(ch, b, 8)  OD,
          (SHORT BITS  sb)
             add_bits(ch, LENG sb, 4),
          (REAL re)
             add_real(ch, re, -12, 5),
          (VECTOR [] REAL vr)
             FORALL r IN vr DO  add_real(ch, r, -12, 5)  OD,
          (CHAR  c)
             putstr(ch, c),
          (STR  vc)
             putstr(ch, vc),
          (BOOL  bool)
             putstr(ch, IF bool THEN  "T"  ELSE  "F"  FI),
          (VECTOR [] BOOL  vecbool)
             FORALL bool IN vecbool
             DO  putstr(ch, IF bool THEN  "T"  ELSE  "F"  FI)  OD,
          (INTWIDTH  iw)
             add_number(ch, int OF iw, width OF iw),
          (WIDTH  sw)
             ( INT  gap = width OF ch - charnumber OF ch - 1;
               putstr(ch, str OF sw);
               IF gap >= width OF sw  OREL  gap < UPB str OF sw
               THEN  INT  ss = width OF sw - UPB str OF sw;
                     IF ss > 0 THEN  put(ch, spaces(ss))  FI
               FI
             ),
          (JUSTIFY  j)
             ( IF justify OF j >= width OF ch - charnumber OF ch
               THEN  newline(ch)
               FI;
               INT  ss = justify OF j - UPB str OF j;
               IF ss > 0 THEN  put(ch, spaces(ss))  FI;
               putstr(ch, str OF j)
             ),
          (TAB  t)
             ( INT  tab = IF tab OF t > 1
                          THEN  tab OF t - ((charnumber OF ch - 1) MOD tab OF t)
                          ELSE  0
                          FI;
               IF charnumber OF ch + tab > width OF ch
               THEN  newline(ch)
               ELSE  putstr(ch, sp[: tab])
               FI
             ),
          (POS  p)
             ( INT  pos = pos OF p MOD width OF ch;
               IF charnumber OF ch /= pos + 1
               THEN  IF charnumber OF ch > pos + 1 THEN  newline(ch)  FI;
                     put(ch, tab(pos))
               FI
             ),
          (AFTER  a)
             ( IF charnumber OF ch < after OF a
               THEN  put(ch, tab(after OF a))
               ELIF charnumber OF ch <= width OF ch
               THEN  putstr(ch, space_str)
               FI
             ),
          (SPACES  s)
             ( IF spaces OF s + charnumber OF ch > width OF ch
               THEN  newline(ch)
               ELIF spaces OF s <= UPB sp
               THEN  putstr(ch, sp[: spaces OF s])
               ELSE  VECTOR [spaces OF s] CHAR  lsp;
                     FORALL sc IN lsp DO  sc:= " "  OD;
                     putstr(ch, lsp)
               FI
             ),
          (LINES  l)
             TO lines OF l DO  newline(ch)  OD,
          (INDENT  in)
             indent OF ch:= IF indent OF in > width OF ch - 20
                            THEN  width OF ch - 20
                            ELIF indent OF in > UPB sp
                            THEN  UPB sp
                            ELSE  indent OF in
                            FI,
          (PROC (RCH) VOID  proc)
             proc(ch),
          (STRAIGHT OUTMODE  struct)  FOR i TO UPB struct
                                      DO put(ch, struct[i]) OD
       ESAC
    OD;


PROC (STR) VOID null_strproc = nullputbuffer;


PROC  putb = (RVC  buffer, VECTOR [] OUTMODE  line) RVC:
BEGIN
   { Any implicit or explicit call of "newline" will discard contents -
     NB - maximum useful buffer space = UPB buffer - 1
   }
   CHANNEL  ch:= (1, 0, 0, UPB buffer - 1, 0, io_ok,
                  buffer, TRUE, FALSE, FALSE, nullputbuffer, nullgetbuffer );
   put(ch, line);
   buffer[: charnumber OF ch - 1]
END;


PROC  endput = (RCH  ch) RVC:
BEGIN
   { Extracts contents of a buffered channel and resets index }
   RVC  ans = (buffer OF ch)[: charnumber OF ch - 1];
   charnumber OF ch:= 1;
   ans
END;


PROC  oneline = (VECTOR [] OUTMODE  out) RVC:
BEGIN
   STRUCT 501 CHAR  buff;
   CHANNEL  ch:= (1, 0, 0, 500, 0, io_ok, buff, TRUE, FALSE, FALSE,
                  nullputbuffer,  nullgetbuffer);

   PROC  putbuffer = (STR  s) VOID:
   BEGIN     { if called, will restart with a bigger buffer }
      buffer OF ch:= HEAP VECTOR [UPB buffer OF ch * 2] CHAR;
      width OF ch:= UPB buffer OF ch - 1;
      GOTO  restart
   END;

   putbuffer OF ch:= putbuffer;

restart:
   put(ch, out);
   MAKERVC (buffer OF ch)[: charnumber OF ch - 1]
END;

  SKIP

KEEP   STR,  VI,  RVC,  RVI,  nilstr,  nullstr,  nilints,  nullints, nilchannel,
       STRTORVC (STR),  RVCTOSTR (RVC),  MAKERVC (STR),  MAKERVC (CHAR),
       MAKERVI (VI),  MAKERVI (INT),  CLEAR (RVC),  CLEAR (RVI),
       concat,  * (STR, INT),  * (CHAR, INT),  hexchars,  intchars,

       CHANNEL,  RCH,  OUTMODE,
       INTWIDTH,  WIDTH,  JUSTIFY,  TAB,  POS,  AFTER,  SPACES,  LINES,  INDENT,
       newline_char,  newpage_char, null_char, space_str,  newline_str,
       charnumber,  linenumber,  charsleft,  setwidth,  intwidth,  width,
       justify,  tab,  pos,  after,  spaces,  lines,  setindent,  resetindent,
       newline,  writeline,  putstr,  putline,  add_number,  add_bits, 
       add_real,  put,  make_channel,  null_strproc,  putb,  endput,  oneline
FINISH
