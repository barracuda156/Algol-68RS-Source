PROGRAM teststrings CONTEXT VOID USE  osif,  putstrings,  getstrings,  time, 
                                      mathslib,  numberstr,  iolib,  clear
BEGIN

configinfo A68CONFIG "$Id: teststrings.a68,v 1.1.1.1 2001-05-07 10:16:11 sian Exp $";


COMMENT 
    ************************************************************************
    This Program is the property of the Secretary of State for Defence
    (United Kingdom) acting through the Defence Research Agency (DRA). Use,
    reproduction, production of amended versions and/or transfer of this
    Program is permitted provided that:

  (a)  this legend be preserved on any such reproduction and amended version,
  (b)  any amended version of this Program be clearly marked to show the
       nature of the amendment and of the name of the amending organisation,
  and
  (c)  any recipient  of such reproduction or amended version accept the
       conditions set out in this legend.

                         Crown Copyright, (c)   1984

                             All rights reserved.

    The Secretary of State for Defence (United Kingdom) acting through his
    Defence Research Agency (DRA) gives no warranty that any element of the
    Software is suitable for any purpose and he shall not be liable for any
    loss or damage including loss or damage resulting in injury or death
    howsoever caused which results from the use of the Software, or any
    developments adaptions modifications translations and enhancements
    thereof.

    The original authors may be contacted via email on ella@dra.hmg.gb or by
    writing to ELLA Office, DRA, St Andrews Road, Malvern, Worcs WR14 3PS, UK.
    ************************************************************************

29:03:95  34.002  ELLA  Modcprght Change copyright header
??:??:??   ?.???  ????
COMMENT
MODE INTPAIR = STRUCT( INT i, j );

STR testfilename = "teststrings.out";
VECTOR[ 81 ]CHAR inbuffer;

INT ts = seconds;
INTPAIR ip1 := ( 1, 2 ),
        ip2 := ( -3, -4 );
COMPL cpl1 := 1.467 I -3.995;
BITS bb := 16r1234cdef;
SHORT BITS sb := SHORTEN 16r89ab;
BOOL booltrue := TRUE, boolfalse := FALSE;

{{ First check output on the stabdard channel }}

   put( stdoutchan, ( newline, "Test strings", newline,
                      "Testing standard output channel 'stdoutchan'", newline,
                      "Seconds is ", ts, " ses. Date-time is ", date_time(ts),
                      newline,
                      "This is an integer 'whole(54321, +5 )'  ",
                      whole(54321, +5 ), newline,
                      "This is a real number 'fixed( 2.345, -6, 3)' ",
                      fixed( 2.345, -6, 3), newline,
                      "This is a real number 'float( 520, -6, 1, 3)' ",
                      float( 520, -6, 1, 3), newline,
                      "This is a bits value '16r1234cdef' ", bb, newline,
                      "This is a short bits value '16r89ab' ", sb, newline,
                      "This is an INTPAIR ( 1, 2 )   ", ip1, newline,
                      "This is an INTPAIR ( -3, -4 ) ", ip2, newline,
                      "This is a free format real number (1.446)  ",
                      1.446, newline,
                      "This is a complex number (1.467 I -3.995)  ",
                      cpl1, newline,
                      "Output a true boolean then a false boolean ",
                      booltrue, boolfalse, newline,
                      "Output an empty string", newline, "", newline,
                      "Now test internally generated input including numbers",
                      newline ));

{{ Now test input using an internal channel }}

{{ A set of strings for testing reading }}

VECTOR[]VECTOR[]CHAR instrings = (
"This is line 1",
"This is line 2",
"1 200 3000",
"43 55 61 73",
"CB21",
"F T",
"1.234 2e2",
"Input an empty string",
"",
"Now test standard input channel 'stdin'",
"Please copy this line to the terminal (RETURN to ignore)" );

INT intop = UPB instrings;     { The top of the test strings vector }
INT pos := 0;                  { The current reading position in the vector }

{ A procedure to check for error conditions on input }

PROC checkerr = (RCH ch, STR msg )BOOL:
BEGIN IOSTATUS stat = getstatus( ch );

   IF stat = io_ok OREL stat = io_eof
   THEN  FALSE
   ELSE  put( stdoutchan, ( "Error ", status OF stat,
                            " reported on ", msg, newline ));
         TRUE
   FI
END;

PROC restart_stream = (RCH chan )VOID:( pos := 0; newline( chan ));

{ A procedure to get the next line of the internal stream, it assumes
  unbuffered input mode }

IOSTATUS io_buf_too_small = make_user_status( 1 );

PROC get_next_line = (RVC str, REF INT length )IOSTATUS:
BEGIN
   IF pos = intop
   THEN  io_eof
   ELSE  STR next = instrings[ pos PLUSAB 1 ];
         INT nexttop = UPB next, strtop = UPB str;
         IF strtop < nexttop
         THEN  io_buf_too_small
         ELSE  str[ : nexttop ] := next;
               length := nexttop;
               io_ok
         FI
   FI
END;

{ Create a channel for internal input using unbuffered mode }

REF CHANNEL instream = make_channel( inbuffer, get_next_line );

{ The following tests check that the channel has been set up correctly.
  The fields it uses are not to be used directly by application programs }

   put( stdoutchan, ( "Test instream setup", newline ));
   IF charnumber OF instream /= 82 THEN
      put( stdoutchan, ( "charnumber is wrong ", charnumber OF instream,
                         newline ))
   FI;
   IF linenumber OF instream /= 0 THEN
      put( stdoutchan, ( "linenumber is wrong ", linenumber OF instream,
                         newline ))
   FI;
   IF width OF instream /= 80 THEN
      put( stdoutchan, ( "width is wrong ", width OF instream, newline ))
   FI;
   IF indent OF instream /= 0 THEN
      put( stdoutchan, ( "indent is wrong ", indent OF instream, newline ))
   FI;
   IF status OF instream /= io_ok THEN
      put( stdoutchan, ( "error is wrong ",
                          status OF status OF instream, newline ))
   FI;
   IF separate OF instream THEN
      put( stdoutchan, ( "separate is wrong ", separate OF instream, newline ))
   FI;
   IF NOT input OF instream THEN
      put( stdoutchan, ( "input is wrong ", input OF instream, newline ))
   FI;
   IF NOT buffered OF instream THEN
      put( stdoutchan, ( "buffered is wrong ", buffered OF instream, newline ))
   FI;
   IF buffer OF instream IS nilstr THEN
      put( stdoutchan, ( "buffer is nil ", newline ))
   FI;


{ Now test the input procedures. The use of 'get' for numbers and booleans
  tests the primitive input procedures except 'getoct' and 'getstr' }

REAL rtmp1, rtmp2;
[ 1 : 3 ]INT threeints;

   WHILE getstatus( instream ) = io_ok
   DO  IF pos = 3
     THEN  get( instream, ( threeints, newline ));
           put( stdoutchan, ( "First int = ", threeints[1], newline,
                              "Second int = ", threeints[2], newline,
                              "Third int = ", threeints[3], newline ))
     ELIF pos = 4
     THEN  get( instream, ( ip1, ip2, newline ));
           put( stdoutchan, ( "First intpair = ", ip1, newline,
                              "Second intpair = ", ip2, newline ))
     ELIF pos = 5
     THEN  get( instream, ( bb, newline ));
           put( stdoutchan, ( "A bits value = ", bb, newline ))
     ELIF pos = 6
     THEN  get( instream, ( booltrue, boolfalse, newline ));
           put( stdoutchan, ( "Bools (FT) = ", booltrue, boolfalse, newline ))
     ELIF pos = 7
     THEN  get( instream, ( rtmp1, rtmp2, newline ));
           put( stdoutchan, ( "First real = ",
                              fixed( rtmp1, -6, 3), newline,
                              "Second real = ",
                              fixed( rtmp2, -6, 3 ), newline ))
     ELSE  put( stdoutchan, ( getstr( instream ), newline ))
       FI
   OD;

   checkerr( instream, "internal stream" );

{  Now check 'get' with a string }

   get( stdinchan, ( newline, inbuffer ));

STR tmpstr = strtrim( inbuffer );

   IF UPB tmpstr > 0 ANDTH tmpstr /= instrings[ intop ] THEN
       put( stdoutchan, ( "Error in reading the string, did you alter it",
                          newline ))
   FI;
   put( stdoutchan, (
                   "Echo that line with primes round it, also tests 'strtrim'",
                   newline,
                   "'", tmpstr, "'", newline, newline ));
   checkerr( stdinchan, "standard input" );

  { Now check writing to and reading from a file, this time we use un-buffered
    output and buffered input }

FILE outfile = open_file( testfilename, write_access, global_msg );

PROC put_out_line = (STR s) VOID: write_buffer( outfile, s, global_msg );

RCH outchan = make_channel( 80, put_out_line );

   put( stdoutchan, ( "Test outchan setup", newline ));
   IF charnumber OF outchan /= 1 THEN
      put( stdoutchan, ( "charnumber is wrong ", charnumber OF outchan,
                         newline ))
   FI;
   IF linenumber OF outchan /= 1 THEN
      put( stdoutchan, ( "linenumber is wrong ", linenumber OF outchan,
                         newline ))
   FI;
   IF width OF outchan /= 80 THEN
      put( stdoutchan, ( "width is wrong ", width OF outchan, newline ))
   FI;
   IF indent OF outchan /= 0 THEN
      put( stdoutchan, ( "indent is wrong ", indent OF outchan, newline ))
   FI;
   IF status OF outchan /= io_ok THEN
      put( stdoutchan, ( "error is wrong ",
                         status OF status OF outchan, newline ))
   FI;
   IF separate OF outchan THEN
      put( stdoutchan, ( "separate is wrong ", separate OF outchan, newline ))
   FI;
   IF input OF outchan THEN
      put( stdoutchan, ( "input is wrong ", input OF outchan, newline ))
   FI;
   IF buffered OF outchan THEN
      put( stdoutchan, ( "buffered is wrong ", buffered OF outchan, newline ))
   FI;
   IF buffer OF outchan ISNT nilstr THEN
      put( stdoutchan, ( "buffer is not nil ", newline ))
   FI;

   put( stdoutchan, ( "Output a file", newline ));
   restart_stream( instream );
   WHILE getstatus( instream ) = io_ok
   DO  put( outchan, ( getstr( instream ), newline ))
   OD;
   close_file( outfile, global_msg );

FILE infile = open_file( testfilename, read_access, global_msg );

PROC get_in_line = (RVC s, REF INT length )IOSTATUS:
                                     read_line( infile, s, length, global_msg);

RCH inchan = make_channel( 80, get_in_line );

   put( stdoutchan, ( "Test inchan setup", newline ));
   IF charnumber OF inchan /= 82 THEN
      put( stdoutchan, ( "charnumber is wrong ", charnumber OF inchan,
                         newline ))
   FI;
   IF linenumber OF inchan /= 0 THEN
      put( stdoutchan, ( "linenumber is wrong ", linenumber OF inchan,
                         newline ))
   FI;
   IF width OF inchan /= 80 THEN
      put( stdoutchan, ( "width is wrong ", width OF inchan, newline ))
   FI;
   IF indent OF inchan /= 0 THEN
      put( stdoutchan, ( "indent is wrong ", indent OF inchan, newline ))
   FI;
   IF status OF inchan /= io_ok THEN
      put( stdoutchan, ( "error is wrong ",
                         status OF status OF inchan, newline ))
   FI;
   IF separate OF inchan THEN
      put( stdoutchan, ( "separate is wrong ", separate OF inchan, newline ))
   FI;
   IF NOT input OF inchan THEN
      put( stdoutchan, ( "input is wrong ", input OF inchan, newline ))
   FI;
   IF buffered OF inchan THEN
      put( stdoutchan, ( "buffered is wrong ", buffered OF inchan, newline ))
   FI;
   IF buffer OF inchan IS nilstr THEN
      put( stdoutchan, ( "buffer is nil ", newline ))
   FI;

   put( stdoutchan, ( "Input a file", newline ));
   restart_stream( instream );
   WHILE getstatus( inchan ) = io_ok
   DO  STR str1 = getstr( instream ),
           str2 = getstr( inchan );
       IF str1 /= str2
       THEN  put( stdoutchan, ( "Check back error at line ",
                                linenumber( inchan ), newline,
                                "'", str1, "'", newline,
                                "'", str2, "'", newline ))
       FI
   OD;
   close_file( infile, global_msg );

   print(( "Test the clear procedure on several things", newline ));

REAL clreal := 23.456;
VECTOR [100] INT vecint;
BOOL boolean := TRUE, clearfailed := FALSE, vecclear := TRUE;
VECTOR [16] CHAR  hexchars := "0123456789ABCDEF";

{ This vector is used to test STRAIGHT in 'clear'.  Fill it with nonzero }

   FOR ii TO UPB vecint DO  vecint[ii] := ii * 100  OD;

   clear( clreal );
   IF ABS clreal > 0.0
   THEN  clearfailed := TRUE;
         print(( "Clear of REAL failed", newline ))
   FI;

   clear( cpl1 );
   IF ABS re OF cpl1 > 0.0 OREL ABS im OF cpl1 > 0.0
   THEN  clearfailed := TRUE;
         print(( "Clear of COMPL failed", newline ))
   FI;

   clear( boolean );
   IF boolean
   THEN  clearfailed := TRUE;
         print(( "Clear of BOOL failed", newline ))
   FI;

   clear( ip1 );
   clear( ip2 );
   IF i OF ip1 /= 0 OREL j OF ip1 /= 0 OREL
      i OF ip2 /= 0 OREL j OF ip2 /= 0
   THEN  clearfailed := TRUE;
         print(( "Clear of INTPAIR failed", newline ))
   FI;

   clear( hexchars );
   IF hexchars /= "                "
   THEN  clearfailed := TRUE;
         print(( "Clear of VEC CHAR failed", newline ))
   FI;

   clear( vecint );
   FORALL ii IN vecint WHILE vecclear DO vecclear := (ii = 0) OD;
   IF NOT vecclear
   THEN  clearfailed := TRUE;
         print(( "Clear of VEC INT failed", newline ))
   FI;

   IF clearfailed
   THEN  print(( "The clear test has failed", newline ))
   ELSE  print(( "The clear test was successfull", newline ))
   FI;

COMPL c1 = 1.2 I 4.6,
      c2 = ( 4.3, 5.9 );

   PROC fixedcmpx = (COMPL cmpx, REAL a, b )STR:
     oneline(( fixed( re OF cmpx, -6, 3 ), " I ", fixed( im OF cmpx, -6, 3 ),
               " [", fixed( a, -6,3 ), ", ", fixed( b, -6, 3 ), "]" ));

REAL d1 = re OF c1 ** 2 + im OF c1 ** 2,
     d2 = re OF c2 ** 2 + im OF c2 ** 2,
     rr = re OF c1 * re OF c2,
     ii = im OF c1 * im OF c2,
     ri = re OF c2 * im OF c1,
     ir = re OF c1 * im OF c2;
REAL q1 = rr + ii,
     q2 = ri - ir,
     m1r = ABS re OF c1,
     m1i = ABS im OF c1;

   print(( newline,
           "Now do some complex number tests, check the results visually",
           newline,
           "c1 = ", fixedcmpx( c1, re OF c1, im OF c1 ), newline,
           "c2 = ", fixedcmpx( c2, re OF c2, im OF c2 ), newline,
           "RE c1 = ", fixed( RE c1, -6, 3 ), " [",
                       fixed( re OF c1, -6, 3 ), "]",
                       newline,
           "IM c1 = ", fixed( IM c1, -6, 3 ), " [",
                       fixed( im OF c1, -6, 3 ), "]",
                       newline,
           "CONJ c1 = ", fixedcmpx( c1, re OF c1, -im OF c1 ), newline,
           "c1 + c2 = ", fixedcmpx( c1 + c2,
                                    re OF c1 + re OF c2,
                                    im OF c1 + im OF c2 ),
                         newline,
           "c1 - c2 = ", fixedcmpx( c1 - c2,
                                    re OF c1 - re OF c2,
                                    im OF c1 - im OF c2 ),
                         newline,
           "c2 - c1 = ", fixedcmpx( c2 - c1,
                                    re OF c2 - re OF c1,
                                    im OF c2 - im OF c1 ),
                         newline,
           "c1 * c2 = ", fixedcmpx( c1 * c2, rr - ii, ir + ri ),newline,
           "c1 / c2 = ", fixedcmpx( c1 / c2, q1 / d2, q2 / d2 ), newline,
           "c2 / c1 = ", fixedcmpx( c2 / c1, q1 / d1, -q2 / d1 ), newline,
           "ABS c1 = ", fixed( ABS c1, -6, 3 ), " [",
                        fixed( sqrt( re OF c1**2 + im OF c1**2 ), -6, 3 ), "]",
                        newline,
           "ABS c2 = ", fixed( ABS c2, -6, 3 ), " [",
                        fixed( sqrt( re OF c2**2 + im OF c2**2 ), -6, 3 ), "]",
                        newline,
           "ARG c1 = ", fixed( ARG c1 * 180 / pi, -6, 3 ), " [",
                        fixed( IF m1r < m1i
                               THEN  90 - arctan( m1r/m1i ) * 180 / pi
                               ELSE  arctan( m1i/m1r ) * 180 / pi
                               FI *
                               IF im OF c1 < 0.0 THEN -1.0 ELSE 1.0 FI,
                               -6, 3 ), "]",
                        newline,
           newline ));

   put( stdoutchan, ( "End of test", newline ));
   SKIP
END
FINISH
